;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ajax.core, :imports nil, :requires {uri goog.Uri, xhr goog.net.XhrIo, goog.net.XhrManager goog.net.XhrManager, goog.net.XhrIo goog.net.XhrIo, goog.Uri.QueryData goog.Uri.QueryData, goog.Uri goog.Uri, query-data goog.Uri.QueryData, goog.net.EventType goog.net.EventType, events goog.events, goog.structs goog.structs, structs goog.structs, goog.json.Serializer goog.json.Serializer, xhrm goog.net.XhrManager, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, goog.events goog.events, reader cljs.reader, goog.net.ErrorCode goog.net.ErrorCode}, :uses nil, :defs {edn-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 226, :column 7, :end-line 226, :end-column 17, :arglists (quote ([]))}, :name ajax.core/edn-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, edn-request-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 62, :column 7, :end-line 62, :end-column 25, :arglists (quote ([]))}, :name ajax.core/edn-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, PUT {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 281, :column 13, :end-line 281, :end-column 16, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/PUT, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, POST {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 280, :column 13, :end-line 280, :end-column 17, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/POST, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, AjaxImpl {:meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 15, :column 14, :end-line 15, :end-column 22, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}}, :protocol-symbol true, :name ajax.core/AjaxImpl, :file "resources/public/js/out/ajax/core.cljs", :end-column 22, :column 1, :line 15, :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}, :info nil, :end-line 15, :impls #{nil goog/net.XhrManager}, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :jsdoc ("@interface")}, json-request-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 88, :column 7, :end-line 88, :end-column 26, :arglists (quote ([]))}, :name ajax.core/json-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, success? {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([status]))}, :name ajax.core/success?, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 15, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status]))}, raw-response-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 81, :column 7, :end-line 81, :end-column 26, :arglists (quote ([]))}, :name ajax.core/raw-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, raw-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 229, :column 7, :end-line 229, :end-column 17, :arglists (quote ([]))}, :name ajax.core/raw-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, read-text {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 74, :column 7, :end-line 74, :end-column 16, :arglists (quote ([xhrio]))}, :name ajax.core/read-text, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, process-inputs {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 185, :column 7, :end-line 185, :end-column 21, :arglists (quote ([uri method {:keys [write content-type], :as format} {:keys [params headers]}]))}, :name ajax.core/process-inputs, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 21, :method-params ([uri method p__5933 p__5934]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 4, :fn-var true, :arglists (quote ([uri method {:keys [write content-type], :as format} {:keys [params headers]}]))}, get-default-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 108, :column 7, :end-line 108, :end-column 25, :arglists (quote ([xhrio]))}, :name ajax.core/get-default-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, -abort {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 24, :column 4, :end-line 24, :end-column 10, :protocol ajax.core/AjaxRequest, :doc "Aborts a running ajax request, if possible.", :arglists (quote ([this error-code]))}, :protocol ajax.core/AjaxRequest, :name ajax.core/-abort, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 10, :method-params ([this error-code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this error-code])), :doc "Aborts a running ajax request, if possible."}, interpret-response {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 146, :column 7, :end-line 146, :end-column 25, :arglists (quote ([format response get-default-format]))}, :name ajax.core/interpret-response, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([format response get-default-format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 3, :fn-var true, :arglists (quote ([format response get-default-format]))}, exception-response {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 130, :column 7, :end-line 130, :end-column 25, :arglists (quote ([e status {:keys [description]} xhrio]))}, :name ajax.core/exception-response, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([e status p__5924 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio]))}, uri-with-params {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 180, :column 7, :end-line 180, :end-column 22, :arglists (quote ([uri params]))}, :name ajax.core/uri-with-params, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 22, :method-params ([uri params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uri params]))}, transform-handler {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 253, :column 7, :end-line 253, :end-column 24, :arglists (quote ([{:keys [handler error-handler finally]}]))}, :name ajax.core/transform-handler, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 24, :method-params ([p__5972]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handler error-handler finally]}]))}, no-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 177, :column 7, :end-line 177, :end-column 16, :arglists (quote ([xhrio]))}, :name ajax.core/no-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, transform-opts {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 268, :column 7, :end-line 268, :end-column 21, :arglists (quote ([opts]))}, :name ajax.core/transform-opts, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 21, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, AjaxRequest {:meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 22, :column 14, :end-line 22, :end-column 25, :doc "An abstraction for a running ajax request.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-abort [[this error-code]]}}}, :protocol-symbol true, :name ajax.core/AjaxRequest, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :column 1, :line 22, :protocol-info {:methods {-abort [[this error-code]]}}, :info nil, :end-line 22, :impls #{goog/net.XhrIo}, :doc "An abstraction for a running ajax request.", :jsdoc ("@interface")}, transform-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 260, :column 7, :end-line 260, :end-column 23, :arglists (quote ([{:keys [format response-format], :as opts}]))}, :name ajax.core/transform-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 23, :method-params ([p__5985]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [format response-format], :as opts}]))}, DELETE {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 282, :column 13, :end-line 282, :end-column 19, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/DELETE, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, params-to-str {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([params]))}, :name ajax.core/params-to-str, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, json-response-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 92, :column 7, :end-line 92, :end-column 27, :arglists (quote ([{:keys [prefix keywords?]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should use this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"}, :name ajax.core/json-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 27, :method-params ([p__5918]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [prefix keywords?]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should use this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"}, get-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 123, :column 7, :end-line 123, :end-column 17, :arglists (quote ([format]))}, :name ajax.core/get-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, abort {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 49, :column 7, :end-line 49, :end-column 12, :arglists (quote ([this]))}, :name ajax.core/abort, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ajax-request {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 208, :column 7, :end-line 208, :end-column 19, :arglists (quote ([{:keys [uri method format manager], :as opts}] [uri method & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([{:keys [uri method format manager], :as opts}]), :arglists ([{:keys [uri method format manager], :as opts}] [uri method & args]), :arglists-meta (nil nil)}}, :name ajax.core/ajax-request, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([{:keys [uri method format manager], :as opts}]), :arglists ([{:keys [uri method format manager], :as opts}] [uri method & args]), :arglists-meta (nil nil)}, :method-params ([{:keys [uri method format manager], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [uri method format manager], :as opts}] [uri method & args])}, read-edn {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([xhrio]))}, :name ajax.core/read-edn, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 15, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, normalize-method {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 196, :column 7, :end-line 196, :end-column 23, :arglists (quote ([method]))}, :name ajax.core/normalize-method, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 23, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method]))}, url-request-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 77, :column 7, :end-line 77, :end-column 25, :arglists (quote ([]))}, :name ajax.core/url-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, keyword-response-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 243, :column 7, :end-line 243, :end-column 30, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 30, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, write-json {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([data]))}, :name ajax.core/write-json, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, use-content-type {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 120, :column 7, :end-line 120, :end-column 23, :arglists (quote ([format]))}, :name ajax.core/use-content-type, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 23, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, edn-response-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 61, :column 7, :end-line 61, :end-column 26, :arglists (quote ([]))}, :name ajax.core/edn-response-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, GET {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 278, :column 13, :end-line 278, :end-column 16, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/GET, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, HEAD {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 279, :column 13, :end-line 279, :end-column 17, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/HEAD, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, TRACE {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 284, :column 13, :end-line 284, :end-column 18, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/TRACE, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, base-handler {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 201, :column 7, :end-line 201, :end-column 19, :arglists (quote ([format {:keys [handler get-default-format]}]))}, :name ajax.core/base-handler, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 19, :method-params ([format p__5947]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format {:keys [handler get-default-format]}]))}, json-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 222, :column 7, :end-line 222, :end-column 18, :arglists (quote ([format-params]))}, :name ajax.core/json-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 18, :method-params ([format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format-params]))}, keyword-request-format {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 234, :column 7, :end-line 234, :end-column 29, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-request-format, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 29, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, -js-ajax-request {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 18, :column 4, :end-line 18, :end-column 20, :protocol ajax.core/AjaxImpl, :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :arglists (quote ([this uri method body headers handler opts]))}, :protocol ajax.core/AjaxImpl, :name ajax.core/-js-ajax-request, :variadic false, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :method-params ([this uri method body headers handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 18, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this uri method body headers handler opts])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest."}, OPTIONS {:protocol-inline nil, :meta {:file "/home/vinod/vinodkumar/projects/spa/resources/public/js/out/ajax/core.cljs", :line 283, :column 13, :end-line 283, :end-column 20, :arglists (quote ([uri & [opts]])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}}, :name ajax.core/OPTIONS, :variadic true, :file "resources/public/js/out/ajax/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri [opts])], :arglists ([uri & [opts]]), :arglists-meta (nil)}, :method-params [(uri [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 1, :fn-var true, :arglists ([uri & [opts]]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}}, :require-macros {m ajax.macros, ajax.macros ajax.macros}, :cljs.analyzer/constants {:seen #{:response :description :get-default-format :finally :format :original-text :keywords? :read :else :aborted? :is-parse-error :method :timeout? :response-format :status-text :params :parse-error :prefix :headers :error-handler :write :manager :priority :status :id :content-type :max-retries :uri :timeout :handler :keywordize-keys}, :order [:timeout :id :priority :max-retries :read :description :write :content-type :prefix :keywords? :keywordize-keys :else :status :response :status-text :is-parse-error :original-text :parse-error :aborted? :timeout? :params :headers :handler :get-default-format :uri :method :format :manager :error-handler :finally :response-format]}, :doc nil}